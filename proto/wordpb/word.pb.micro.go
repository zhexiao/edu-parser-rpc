// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: wordpb/word.proto

//protoçš„package

package wordpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	basepb "github.com/zhexiao/edu-parser-rpc/proto/basepb"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for WordSrv service

type WordSrvService interface {
	ParserPaper(ctx context.Context, in *basepb.Request, opts ...client.CallOption) (*basepb.Response, error)
	ParserQuestion(ctx context.Context, in *basepb.Request, opts ...client.CallOption) (*basepb.Response, error)
}

type wordSrvService struct {
	c    client.Client
	name string
}

func NewWordSrvService(name string, c client.Client) WordSrvService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "wordpb"
	}
	return &wordSrvService{
		c:    c,
		name: name,
	}
}

func (c *wordSrvService) ParserPaper(ctx context.Context, in *basepb.Request, opts ...client.CallOption) (*basepb.Response, error) {
	req := c.c.NewRequest(c.name, "WordSrv.ParserPaper", in)
	out := new(basepb.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordSrvService) ParserQuestion(ctx context.Context, in *basepb.Request, opts ...client.CallOption) (*basepb.Response, error) {
	req := c.c.NewRequest(c.name, "WordSrv.ParserQuestion", in)
	out := new(basepb.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WordSrv service

type WordSrvHandler interface {
	ParserPaper(context.Context, *basepb.Request, *basepb.Response) error
	ParserQuestion(context.Context, *basepb.Request, *basepb.Response) error
}

func RegisterWordSrvHandler(s server.Server, hdlr WordSrvHandler, opts ...server.HandlerOption) error {
	type wordSrv interface {
		ParserPaper(ctx context.Context, in *basepb.Request, out *basepb.Response) error
		ParserQuestion(ctx context.Context, in *basepb.Request, out *basepb.Response) error
	}
	type WordSrv struct {
		wordSrv
	}
	h := &wordSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&WordSrv{h}, opts...))
}

type wordSrvHandler struct {
	WordSrvHandler
}

func (h *wordSrvHandler) ParserPaper(ctx context.Context, in *basepb.Request, out *basepb.Response) error {
	return h.WordSrvHandler.ParserPaper(ctx, in, out)
}

func (h *wordSrvHandler) ParserQuestion(ctx context.Context, in *basepb.Request, out *basepb.Response) error {
	return h.WordSrvHandler.ParserQuestion(ctx, in, out)
}
