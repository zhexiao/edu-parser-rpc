// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: excelpb/excel.proto

//protoçš„package

package excelpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	basepb "github.com/zhexiao/edu-parser-rpc/proto/basepb"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ExcelSrv service

type ExcelSrvService interface {
	ParserPaper(ctx context.Context, in *basepb.Request, opts ...client.CallOption) (*basepb.Response, error)
	ParserOutline(ctx context.Context, in *basepb.Request, opts ...client.CallOption) (*basepb.Response, error)
	ParserBook(ctx context.Context, in *basepb.Request, opts ...client.CallOption) (*basepb.Response, error)
	ParserCognitionSp(ctx context.Context, in *basepb.Request, opts ...client.CallOption) (*basepb.Response, error)
	ParserCognitionMap(ctx context.Context, in *basepb.Request, opts ...client.CallOption) (*basepb.Response, error)
}

type excelSrvService struct {
	c    client.Client
	name string
}

func NewExcelSrvService(name string, c client.Client) ExcelSrvService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "excelpb"
	}
	return &excelSrvService{
		c:    c,
		name: name,
	}
}

func (c *excelSrvService) ParserPaper(ctx context.Context, in *basepb.Request, opts ...client.CallOption) (*basepb.Response, error) {
	req := c.c.NewRequest(c.name, "ExcelSrv.ParserPaper", in)
	out := new(basepb.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *excelSrvService) ParserOutline(ctx context.Context, in *basepb.Request, opts ...client.CallOption) (*basepb.Response, error) {
	req := c.c.NewRequest(c.name, "ExcelSrv.ParserOutline", in)
	out := new(basepb.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *excelSrvService) ParserBook(ctx context.Context, in *basepb.Request, opts ...client.CallOption) (*basepb.Response, error) {
	req := c.c.NewRequest(c.name, "ExcelSrv.ParserBook", in)
	out := new(basepb.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *excelSrvService) ParserCognitionSp(ctx context.Context, in *basepb.Request, opts ...client.CallOption) (*basepb.Response, error) {
	req := c.c.NewRequest(c.name, "ExcelSrv.ParserCognitionSp", in)
	out := new(basepb.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *excelSrvService) ParserCognitionMap(ctx context.Context, in *basepb.Request, opts ...client.CallOption) (*basepb.Response, error) {
	req := c.c.NewRequest(c.name, "ExcelSrv.ParserCognitionMap", in)
	out := new(basepb.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ExcelSrv service

type ExcelSrvHandler interface {
	ParserPaper(context.Context, *basepb.Request, *basepb.Response) error
	ParserOutline(context.Context, *basepb.Request, *basepb.Response) error
	ParserBook(context.Context, *basepb.Request, *basepb.Response) error
	ParserCognitionSp(context.Context, *basepb.Request, *basepb.Response) error
	ParserCognitionMap(context.Context, *basepb.Request, *basepb.Response) error
}

func RegisterExcelSrvHandler(s server.Server, hdlr ExcelSrvHandler, opts ...server.HandlerOption) error {
	type excelSrv interface {
		ParserPaper(ctx context.Context, in *basepb.Request, out *basepb.Response) error
		ParserOutline(ctx context.Context, in *basepb.Request, out *basepb.Response) error
		ParserBook(ctx context.Context, in *basepb.Request, out *basepb.Response) error
		ParserCognitionSp(ctx context.Context, in *basepb.Request, out *basepb.Response) error
		ParserCognitionMap(ctx context.Context, in *basepb.Request, out *basepb.Response) error
	}
	type ExcelSrv struct {
		excelSrv
	}
	h := &excelSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&ExcelSrv{h}, opts...))
}

type excelSrvHandler struct {
	ExcelSrvHandler
}

func (h *excelSrvHandler) ParserPaper(ctx context.Context, in *basepb.Request, out *basepb.Response) error {
	return h.ExcelSrvHandler.ParserPaper(ctx, in, out)
}

func (h *excelSrvHandler) ParserOutline(ctx context.Context, in *basepb.Request, out *basepb.Response) error {
	return h.ExcelSrvHandler.ParserOutline(ctx, in, out)
}

func (h *excelSrvHandler) ParserBook(ctx context.Context, in *basepb.Request, out *basepb.Response) error {
	return h.ExcelSrvHandler.ParserBook(ctx, in, out)
}

func (h *excelSrvHandler) ParserCognitionSp(ctx context.Context, in *basepb.Request, out *basepb.Response) error {
	return h.ExcelSrvHandler.ParserCognitionSp(ctx, in, out)
}

func (h *excelSrvHandler) ParserCognitionMap(ctx context.Context, in *basepb.Request, out *basepb.Response) error {
	return h.ExcelSrvHandler.ParserCognitionMap(ctx, in, out)
}
